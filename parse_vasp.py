# parse_vasp.py
''' Library defines the vasp_run object, an object to store data about DFT
simulations using VASP.'''

import numpy as np
import os
import re

def isRepFloat(a):
    try:
        float(a)
        return True
    except:
        return False

def isRepInt(a):
    try:
        float(a)
        return True
    except:
        return False

class vasp_run(object):
    '''object to store data about a single DFT simulation.'''
    def __init__(self):
        self.params = {}
        self.cell = np.zeros([3,3])
        self.pos = np.zeros([0,3])
        self.spec = []
        self.nspec = []
        cwd = os.getcwd()
        flist = ['POSCAR','INCAR','POTCAR','KPOINTS']
        flistFull = [ os.path.join(cwd, a) for a in flist ]
        self.files = dict(zip(flist,flistFull))
        self.name = os.path.basename(os.path.normpath(cwd))
        self.label = None # label in POSCAR file

    def readIncar(self,fname='INCAR'):
        ''' Read om parameters from an VASP INCAR file and store the results in a dictionary'''
        try:
            f = open(fname,'r')
        except:
            raise NameError( ''.join(['file:',str(fname),'not found.']) )
            return 0
        for line in f:
#             if re.match(r'\s+#',line):
#                 break
            sline = line.split()
#             try:
            # check that line is valid and uncommented
            if len(sline) > 2 and not '#' in sline[0] and sline[1] == '=':
                print sline
                param = sline[0]
                val = []
#                 for sl in sline[2:]:
#                     try: # if value is a float
#                         val += [float(sline[2]]
#                         while sl in sline[3:] 
#                             for sl in sline[3:]:
#                                 val += [float(sl]]
# 
#                     except:
#                         break
#                     if val == []:
#                         try: # if value is an int
#                             val += [int(sl)]
#                         except:
#                             break


# must check for possible string of floats or ints
                if isRepFloat(sline[2]):
                    val += [ float(sline[2]) ]
                    idx = 3
                    while isRepFloat(sline[idx]):
                        val += [ float(sline[idx]) ]


                        
                        

               


                    if val == []:
                        if sline[ 2] == '.True.':
                            val += [ True ]
                        elif sline[2] == '.False.':
                            val += [ False]
                        else:
                            val = [ ' '.join(sline[2:]) ]

                if len(val) == 1:
                    self.params.update({param:val[0]})
                elif len(val) >1:
                    self.params.update({param:val})

#             except:
#                 pass

        return 1

    def printPosFile(fname,cell,nspec,pos,
            label='Generated by parse_vasp.printPosFile',vel=np.zeros([0,3]) ):
        pass

    def readPoscar(self,fname='POSCAR'):        
        ''' Read values from a POSCAR file into the corresponding vasp_run object
variables.'''
        vals = self.readPosFile(fname)
        self.label = vals['label']
        self.cell = vals['cell']
        self.nspec = vals['nspec']
        self.pos = vals['pos']


    def readPosFile(self,fname):
        ''' Read in information from a position file (POSCAR,CONTCAR,REFCAR) and
return the label, cell parameters, number of species, positions and velocities if theyexist. Returns dict indexed by 'label','cell','nspec','pos' and 'vel'.'''

        # try to open file
        try:
            f = open(fname,'r')
        except:
            raise NameError( ''.join(['file:',str(fname),'not found.']) )
            return 0
        try:
            label = f.readline()
        except:
            raise NameError( ''.join(['file:',str(fname),'not found.']) )
        # read cell parameters
        try:
            scale = float(f.readline())
            icell = np.zeros([3,3])
            for i in range(3):
                xlist = [ float(x) for x in f.readline().split() ]
                icell[i,:] = np.array(xlist)
            cell = scale*icell
        except:
            raise ValueError(''.join(['Problem reading in cell parameters from ',str(fname)]) )
        # read number of atoms (per spec)
        try:
            nspec = [ int(x) for x in f.readline().split() ]
            
        except:
            raise ValueError( ''.join(['Problem reading in number of atoms from ',str(fname)]) )

        if  not 'Direct'  in f.readline():
            raise ValueError( join(['"Cartesian" variable for input not yet implemented',str(fname)]) )

        # read in positions of atoms
        try:
            xpos = np.zeros([sum(nspec),3])
            for i in range(sum(nspec)):
                xpos[i,:] =  np.array( [ float(x) for x in f.readline().split() ])
            pos = xpos
        except:
            raise ValueError(''.join(['Format on positions in ',str(fname),' is incorrect.']) )

        # form output
        output = {'label':label,'cell':cell,'nspec':nspec,'pos':pos}

        # try reading in velocities should they exist
        try:
            f.readline()
            xvel = np.zeros([sum(nspec),3])
            for i in range(sum(nspec)):
                xvel[i,:] =  np.array( [ float(x) for x in f.readline().split() ])
            vel = xvel
            output.update({'vel':vel})
        except:
            pass

        return output


    def readPotcar(self,fname='POTCAR'):
        ''' Read in atom times from POTCAR'''
        try:
            f = open(fname,'r')
        except:
            raise NameError(''.join(['file: ',str(fname),' not found.']))
            return 0
        matches = []
        for line in f:
            if "RH" in line:
                matches.append(line)
        self.spec = [ re.sub(r'\W', '',l.split()[1]) for l in matches ]
        return 1



 
class md_run (vasp_run):

    '''object to store data about a single DFT molecular-dynamics simulation.'''
    def __init__(self):
        self.refpos = None


# Test runs functions from the commandline
if __name__ == '__main__':

    myRun = vasp_run()
    myRun.readIncar()
    myRun.readPoscar()
    myRun.readPotcar()

    print myRun.params  
    print myRun.cell        
    print myRun.pos         
    print myRun.spec        
    print myRun.nspec       
    print myRun.files       
    print myRun.name        
    print myRun.label       


